/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/vaults/{vaultId}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get vault usage statistics
         * @description Returns detailed usage statistics for a vault including storage, files, folders, and AI usage
         */
        get: operations["vault-usage-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vaults": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all vaults for the current user */
        get: operations["vault-myVaults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{vaultId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get events for a vault after a specific date marker */
        get: operations["event-getVaultEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account details
         * @description Get details about the current user's account
         */
        get: operations["account-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/trash/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clear all items in trash for a vault
         * @description Permanently deletes all files and folders in the vault's trash
         */
        post: operations["fs-trash-clear"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/single": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare single file upload
         * @description Prepares upload for a single file and returns signed URL
         */
        post: operations["fs-file-upload-single-prepare"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/multipart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare multipart file upload
         * @description Prepares upload for a large file using multipart upload
         */
        post: operations["fs-file-upload-multipart-prepare"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/multipart/{uploadId}/parts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List multipart upload parts */
        get: operations["fs-file-upload-multipart-listParts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/multipart/{uploadId}/sign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign multipart upload URLs */
        post: operations["fs-file-upload-multipart-signPart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/multipart/{uploadId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete multipart upload */
        post: operations["fs-file-upload-multipart-complete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/multipart/{uploadId}/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Abort multipart upload */
        post: operations["fs-file-upload-multipart-abort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/finish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finish file upload
         * @description Marks a file upload as complete and triggers post-processing
         */
        post: operations["fs-file-upload-finish"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/upload/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check if file can be uploaded
         * @description Validates storage space and checks for existing files
         */
        post: operations["fs-file-upload-check"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/{fileId}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy a file
         * @description Create a copy of a file in a new location and/or with a new name
         */
        post: operations["fs-file-copy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/{fileId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move a file
         * @description Move a file to a new location and/or rename it
         */
        post: operations["fs-file-move"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/{fileId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file content signed URL
         * @description Get a signed URL to download or view a file's content
         */
        get: operations["fs-file-content"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file metadata
         * @description Get metadata for a specific file
         */
        get: operations["fs-file-getMetadata"];
        put?: never;
        post?: never;
        /**
         * Delete a file
         * @description Delete a file permanently or move to trash
         */
        delete: operations["fs-file-delete"];
        options?: never;
        head?: never;
        /**
         * Update file metadata
         * @description Update metadata for a specific file
         */
        patch: operations["fs-file-updateMetadata"];
        trace?: never;
    };
    "/fs/folders/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get folder metadata
         * @description Get metadata for a specific folder
         */
        get: operations["fs-folder-get"];
        put?: never;
        post?: never;
        /**
         * Delete a folder
         * @description Delete a folder and optionally its contents
         */
        delete: operations["fs-folder-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/folders/{folderId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move a folder
         * @description Move a folder to a new location and/or rename it
         */
        post: operations["fs-folder-move"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/folders/{folderId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List folder contents
         * @description Get files and folders inside a folder
         */
        get: operations["fs-folder-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fs/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new folder
         * @description Create a new folder in a vault
         */
        post: operations["fs-folder-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test-hello": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a test string
         * @description This is a test endpoint
         */
        get: operations["test-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test-with-params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a test string with params
         * @description This is a test endpoint with params, example: /api/test-with-params?name=John
         */
        get: operations["test-getWithParams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test-with-route-params/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["test-withRouteParams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test-mutation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post a test string
         * @description This is a test endpoint for post request will use the body of the request as input
         */
        post: operations["test-mutationPostExample"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["test-testGetWithDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Invalid input data error (400)
         * @description The error information
         * @example {
         *       "code": "BAD_REQUEST",
         *       "message": "Invalid input data",
         *       "issues": []
         *     }
         */
        "error.BAD_REQUEST": {
            /**
             * @description The error message
             * @example Invalid input data
             */
            message: string;
            /**
             * @description The error code
             * @example BAD_REQUEST
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Authorization not provided error (401)
         * @description The error information
         * @example {
         *       "code": "UNAUTHORIZED",
         *       "message": "Authorization not provided",
         *       "issues": []
         *     }
         */
        "error.UNAUTHORIZED": {
            /**
             * @description The error message
             * @example Authorization not provided
             */
            message: string;
            /**
             * @description The error code
             * @example UNAUTHORIZED
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Insufficient access error (403)
         * @description The error information
         * @example {
         *       "code": "FORBIDDEN",
         *       "message": "Insufficient access",
         *       "issues": []
         *     }
         */
        "error.FORBIDDEN": {
            /**
             * @description The error message
             * @example Insufficient access
             */
            message: string;
            /**
             * @description The error code
             * @example FORBIDDEN
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Not found error (404)
         * @description The error information
         * @example {
         *       "code": "NOT_FOUND",
         *       "message": "Not found",
         *       "issues": []
         *     }
         */
        "error.NOT_FOUND": {
            /**
             * @description The error message
             * @example Not found
             */
            message: string;
            /**
             * @description The error code
             * @example NOT_FOUND
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Internal server error error (500)
         * @description The error information
         * @example {
         *       "code": "INTERNAL_SERVER_ERROR",
         *       "message": "Internal server error",
         *       "issues": []
         *     }
         */
        "error.INTERNAL_SERVER_ERROR": {
            /**
             * @description The error message
             * @example Internal server error
             */
            message: string;
            /**
             * @description The error code
             * @example INTERNAL_SERVER_ERROR
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "vault-usage-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vaultId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        vault: {
                            /** @enum {string} */
                            plan: "free" | "pro";
                            memberCount: number;
                            tagCount: number;
                            billingCycleStart: number;
                        };
                        ai: {
                            used: number;
                            total: number;
                            free: number;
                        };
                        fs: {
                            used: number;
                            total: number;
                            free: number;
                            trashed: number;
                            other: number;
                            folderCount: number;
                            fileCount: number;
                            objectCount: number;
                            trashedCount: number;
                            versionCount: number;
                        };
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "vault-myVaults": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        userId: string;
                        vaultId: string;
                        /** @enum {string} */
                        role: "owner" | "admin" | "member" | "guest";
                        user: {
                            id: string;
                            name: string;
                            email: string | null;
                            emailVerified: boolean;
                            image: string | null;
                            isWhitelisted: boolean;
                            createdAt: string;
                            updatedAt: string;
                        };
                        vault: {
                            id: string;
                            slug: string;
                            name: string;
                            stripeCustomerId: string | null;
                            billingCycleStart: number;
                            aiUsage: number;
                            storageUsage: number;
                            inviteCode: string | null;
                            createdAt: string;
                            /** @enum {string} */
                            plan: "free" | "pro";
                            status: string;
                            userVaultRoles: {
                                userId: string;
                                vaultId: string;
                                /** @enum {string} */
                                role: "owner" | "admin" | "member" | "guest";
                                user: {
                                    id: string;
                                    name: string;
                                    email: string | null;
                                    emailVerified: boolean;
                                    image: string | null;
                                    isWhitelisted: boolean;
                                    createdAt: string;
                                    updatedAt: string;
                                };
                            }[];
                        };
                    }[];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "event-getVaultEvents": {
        parameters: {
            query: {
                datePosition: string;
                limit?: number;
            };
            header?: never;
            path: {
                vaultId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        hasMore: boolean;
                        events: {
                            id: string;
                            vaultId: string;
                            type: string;
                            data: ((string | number | boolean | null) | {
                                [key: string]: unknown;
                            } | unknown[]) | null;
                            authorId: string | null;
                            createdAt: string;
                        }[];
                        newPosition: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "account-get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        email: string | null;
                        emailVerified: boolean;
                        image: string | null;
                        isWhitelisted: boolean;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-trash-clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    vaultId: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        deletedFiles: number;
                        deletedFolders: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-single-prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    size: number;
                    vaultId: string;
                    hash: string;
                    modTime?: string;
                    parentId: string | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        uploadUrl: string | null;
                        key: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-multipart-prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    size: number;
                    vaultId: string;
                    hash: string;
                    parentId: string | null;
                    modTime?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        key: string;
                        multipartUploadId: string | null;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-multipart-listParts": {
        parameters: {
            query: {
                key: string;
            };
            header?: never;
            path: {
                uploadId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        PartNumber?: number;
                        ETag?: string;
                        Size?: number;
                    }[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-multipart-signPart": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uploadId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    key: string;
                    parts: {
                        PartNumber: number;
                        Size: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        PartNumber?: number;
                        ETag?: string;
                        Size?: number;
                        uploadUrl: string;
                    }[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-multipart-complete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uploadId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    key: string;
                    parts: {
                        PartNumber?: number;
                        ETag?: string;
                        Size?: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        location?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-multipart-abort": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uploadId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    key: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-finish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    key: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        fileId: string;
                        key: string;
                        status: number;
                        size: number;
                        type: string;
                        hash: string;
                        summary: string | null;
                        createdBy: string | null;
                        modTime: string;
                        createdAt: string;
                        metadata: ((string | number | boolean | null) | {
                            [key: string]: unknown;
                        } | unknown[]) | null;
                        name: string;
                        vaultId: string;
                        folderId: string | null;
                        currentVersionId: string | null;
                        updatedBy: string | null;
                        deletedAt: string | null;
                        updatedAt: string;
                        folderPath: string;
                        path: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-upload-check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    folderId: string | null;
                    name: string;
                    size: number;
                    vaultId: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        canUpload: boolean;
                        existingFileId: string | null;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-copy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    newName: string;
                    newParentId: string | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        fileId: string;
                        key: string;
                        status: number;
                        size: number;
                        type: string;
                        hash: string;
                        summary: string | null;
                        createdBy: string | null;
                        modTime: string;
                        createdAt: string;
                        metadata: ((string | number | boolean | null) | {
                            [key: string]: unknown;
                        } | unknown[]) | null;
                        name: string;
                        vaultId: string;
                        folderId: string | null;
                        currentVersionId: string | null;
                        updatedBy: string | null;
                        deletedAt: string | null;
                        updatedAt: string;
                        folderPath: string;
                        path: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-move": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    vaultId: string;
                    newName: string;
                    newParentId: string | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        fileId: string;
                        key: string;
                        status: number;
                        size: number;
                        type: string;
                        hash: string;
                        summary: string | null;
                        createdBy: string | null;
                        modTime: string;
                        createdAt: string;
                        metadata: ((string | number | boolean | null) | {
                            [key: string]: unknown;
                        } | unknown[]) | null;
                        name: string;
                        vaultId: string;
                        folderId: string | null;
                        currentVersionId: string | null;
                        updatedBy: string | null;
                        deletedAt: string | null;
                        updatedAt: string;
                        folderPath: string;
                        path: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-content": {
        parameters: {
            query?: {
                embed?: boolean;
            };
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        redirect: {
                            code: number;
                            /** Format: uri */
                            url: string;
                        };
                        updatedAt: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-getMetadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        fileId: string;
                        key: string;
                        status: number;
                        size: number;
                        type: string;
                        hash: string;
                        summary: string | null;
                        createdBy: string | null;
                        modTime: string;
                        createdAt: string;
                        metadata: ((string | number | boolean | null) | {
                            [key: string]: unknown;
                        } | unknown[]) | null;
                        name: string;
                        vaultId: string;
                        folderId: string | null;
                        currentVersionId: string | null;
                        updatedBy: string | null;
                        deletedAt: string | null;
                        updatedAt: string;
                        folderPath: string;
                        path: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-delete": {
        parameters: {
            query?: {
                permanent?: boolean;
            };
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        deletedAt: string;
                        bytesDeleted: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-file-updateMetadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    modTime: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        fileId: string;
                        key: string;
                        status: number;
                        size: number;
                        type: string;
                        hash: string;
                        summary: string | null;
                        createdBy: string | null;
                        modTime: string;
                        createdAt: string;
                        metadata: ((string | number | boolean | null) | {
                            [key: string]: unknown;
                        } | unknown[]) | null;
                        name: string;
                        vaultId: string;
                        folderId: string | null;
                        currentVersionId: string | null;
                        updatedBy: string | null;
                        deletedAt: string | null;
                        updatedAt: string;
                        folderPath: string;
                        path: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-folder-get": {
        parameters: {
            query: {
                vaultId: string;
            };
            header?: never;
            path: {
                folderId: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        vaultId: string;
                        name: string;
                        parentId: string | null;
                        updatedBy: string | null;
                        updatedAt: string;
                        deletedAt: string | null;
                        createdAt: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-folder-delete": {
        parameters: {
            query: {
                vaultId: string;
                permanent?: boolean;
                recursive?: boolean;
            };
            header?: never;
            path: {
                folderId: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        deletedAt: string;
                        deletedFiles: {
                            id: string;
                            name: string;
                            vaultId: string;
                            folderId: string | null;
                            currentVersionId: string | null;
                            updatedBy: string | null;
                            deletedAt: string | null;
                            updatedAt: string;
                            createdAt: string;
                        }[];
                        deletedFolders: {
                            id: string;
                            vaultId: string;
                            name: string;
                            parentId: string | null;
                            updatedBy: string | null;
                            updatedAt: string;
                            deletedAt: string | null;
                            createdAt: string;
                        }[];
                        bytesDeleted: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-folder-move": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                folderId: string | null;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    vaultId: string;
                    newName: string;
                    newParentId: string | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        vaultId: string;
                        name: string;
                        parentId: string | null;
                        updatedBy: string | null;
                        updatedAt: string;
                        deletedAt: string | null;
                        createdAt: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-folder-list": {
        parameters: {
            query: {
                vaultId: string;
            };
            header?: never;
            path: {
                folderId: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        files: {
                            id: string;
                            fileId: string;
                            key: string;
                            status: number;
                            size: number;
                            type: string;
                            hash: string;
                            summary: string | null;
                            createdBy: string | null;
                            modTime: string;
                            createdAt: string;
                            metadata: ((string | number | boolean | null) | {
                                [key: string]: unknown;
                            } | unknown[]) | null;
                            name: string;
                            vaultId: string;
                            folderId: string | null;
                            currentVersionId: string | null;
                            updatedBy: string | null;
                            deletedAt: string | null;
                            updatedAt: string;
                            folderPath: string;
                            path: string;
                            folder?: {
                                id: string;
                                vaultId: string;
                                name: string;
                                parentId: string | null;
                                updatedBy: string | null;
                                updatedAt: string;
                                deletedAt: string | null;
                                createdAt: string;
                            };
                        }[];
                        folders: {
                            id: string;
                            vaultId: string;
                            name: string;
                            parentId: string | null;
                            updatedBy: string | null;
                            updatedAt: string;
                            deletedAt: string | null;
                            createdAt: string;
                        }[];
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "fs-folder-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    parentId: string | null;
                    name: string;
                    vaultId: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        vaultId: string;
                        name: string;
                        parentId: string | null;
                        updatedBy: string | null;
                        updatedAt: string;
                        deletedAt: string | null;
                        createdAt: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "test-get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "test-getWithParams": {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "test-withRouteParams": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "test-mutationPostExample": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    age: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "test-testGetWithDate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        deletedFolders: (string | null)[];
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
}
